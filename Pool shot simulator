%------------------------------------------------------------%
%------------------------------------------------------------%
                %% Setting up table and balls %%
%------------------------------------------------------------%
%------------------------------------------------------------%

% Pool table info
% Table boundaries
tableWidth = 107;
tableLength = 213;

tableCOF = 0.03; % table felt coefficient of friction
tableCOR = 0.8; % table cushion coefficient of restitution
g = 9.81; % m/s/s gravity 

% Cue ball info
placing = [0.5, 0.25];
cuePos = [tableWidth,tableLength] .* placing; % x,y position

cueVel = 50; % mm/s current velocity
cueAng = 90; % degrees angle aimed at

cueDiam = 5.7; % radius of cueball, so cue ball doesnt clip into anything
cueRadius= cueDiam/2;

% 8 Ball
placing = [0.5, 0.75];
bbPos = [tableWidth,tableLength] .* placing; % x,y position

bbDiam = 6.03; % radius of object balls
bbRadius = bbDiam/2;
bbVel = 0;
bbAng = 0;

% Packaging up structs for later functions
% Table setup
tableParams.width = tableWidth;
tableParams.length = tableLength;
tableParams.cof = tableCOF;
tableParams.cor = tableCOR;

%------------------------------------------------------------%
%------------------------------------------------------------%
                    %% Graph of game %%
%------------------------------------------------------------%
%------------------------------------------------------------%

% Setting up figure view of pool table
figure
ylim([0 225]), xlim([-25 200])
set(gca,'xtick',[]), set(gca,'ytick',[])
hold on, axis square off
rectangle('Position',[0,0 tableWidth,tableLength],'EdgeColor','g','LineWidth',2)
line([0,tableWidth],[tableLength/4, tableLength/4], 'Color', 'k')
cue_plot = plot(cuePos(1),cuePos(2),'o','Color',[0.2 0.2 0.2], ...
    'MarkerFaceColor',[0.8 0.8 0.8],'MarkerSize',cueDiam);
bb_plot = plot(bbPos(1),bbPos(2),'o','Color',[0 0 0], ...
    'MarkerFaceColor',[0 0 0],'MarkerSize',6);


% Info for game
T = 15; % seconds duration of entire sim
steps = 100; % number of step increments
t = linspace(0,T,steps); % timings at each step
dt = T/steps; % second increments at each step
tidx = 0;

cueVel_dt = cueVel*dt;

% Run through each time increment for the cue ball
while cueVel_dt > 0
    % Tracking current time passed
    tidx = tidx + 1;

    % Cue ball changes 
    [cuePos, cueVel_dt, cueAng] = cueChanger(cuePos, cueVel_dt, cueAng, dt, tableParams);

    % Update positions of balls
    set(cue_plot,'XData',cuePos(1),'YData',cuePos(2))
    fig_title = get(gca,'Title');
    set(fig_title,'String',strcat('t = ', num2str( tidx*dt ) ) );

    % Draw next frame
    drawnow
    pause(0.02)

end

%------------------------------------------------------------%
%------------------------------------------------------------%
                    %% MISC functions %%
%------------------------------------------------------------%
%------------------------------------------------------------%

function [cuePos, cueVel, cueAng] = cueChanger(cuePos, cueVel, cueAng, dt, tableParams)
    % Adjust ball velocity for dt time increments and applying deceleration from
    % friction with table
    cueVel = max(cueVel-(tableParams.cof*9.81*dt), 0); % max() to avoid negative velocities

    % Computing vector components of cue ball movement from
    % (magnitude,degrees) vector format
    xComp = cos(pi*cueAng/180);
    yComp = sin(pi*cueAng/180);

    % Change in xy positions across given time step
    xChange = cueVel*xComp / ((abs(xComp)+abs(yComp)));
    yChange = cueVel*yComp / ((abs(xComp)+abs(yComp)));

    % Checking for and dealing with any cushion hits
    [cueAng, xChange, yChange, cueVel] = cushionCollidor(cuePos, cueVel, cueAng, xChange, yChange, tableParams);
    
    % Updating cue position and velocity for function output
    cuePos = cuePos + [xChange, yChange];
end

function [cueAng, xChange, yChange, cueVel] = cushionCollidor(cuePos, cueVel, cueAng, xChange, yChange, tableParams)
    % Table specs
    tableWidth = tableParams.width;
    tableLength = tableParams.length;
    tableCOR = tableParams.cor;

    % Radius of cueball, so cue ball doesnt clip into anything    
    cueRadius = 3; 

    % Cue ball positions
    xPos = cuePos(1);
    yPos = cuePos(2);

    % Logic checks for cushion collisions
    R_collision = xPos + xChange >= tableWidth - cueRadius;
    L_collision = xPos + xChange <= cueRadius;

    U_collision = yPos + yChange >= tableLength - cueRadius;
    D_collision = yPos + yChange <= cueRadius;

    % Left or right collision
    if L_collision || R_collision
        xChange = -xChange;
        cueVel = cueVel * tableCOR;
        cueAng = 180 - cueAng;
    end

    if U_collision || D_collision
        yChange = -yChange;
        cueVel = cueVel * tableCOR;
        cueAng = 360 - cueAng;
    end
end
